type token =
  | LPAREN
  | RPAREN
  | MINUS
  | PLUS
  | MINUSDOT
  | PLUSDOT
  | TIMES
  | DIVIDE
  | TIMESDOT
  | DIVIDEDOT
  | MOD
  | EQUAL
  | NEQUAL
  | NMORE
  | NLESS
  | LESS
  | MORE
  | IF
  | THEN
  | ELSE
  | LET
  | IN
  | REC
  | NUMBER of (int)
  | REAL of (float)
  | VAR of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
(* 補助的な変数、関数、型などの定義 *)
# 35 "parser.ml"
let yytransl_const = [|
  257 (* LPAREN *);
  258 (* RPAREN *);
  259 (* MINUS *);
  260 (* PLUS *);
  261 (* MINUSDOT *);
  262 (* PLUSDOT *);
  263 (* TIMES *);
  264 (* DIVIDE *);
  265 (* TIMESDOT *);
  266 (* DIVIDEDOT *);
  267 (* MOD *);
  268 (* EQUAL *);
  269 (* NEQUAL *);
  270 (* NMORE *);
  271 (* NLESS *);
  272 (* LESS *);
  273 (* MORE *);
  274 (* IF *);
  275 (* THEN *);
  276 (* ELSE *);
  277 (* LET *);
  278 (* IN *);
  279 (* REC *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  280 (* NUMBER *);
  281 (* REAL *);
  282 (* VAR *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\003\000\003\000\004\000\004\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\000\000"

let yylen = "\002\000\
\001\000\001\000\001\000\003\000\001\000\002\000\001\000\002\000\
\001\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\008\000\008\000\008\000\008\000\008\000\008\000\
\006\000\008\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\001\000\002\000\003\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\027\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\014\000\015\000\
\017\000\018\000\016\000\008\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\006\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\009\000\010\000\052\000\025\000"

let yysindex = "\004\000\
\005\255\000\000\005\255\005\255\233\254\000\000\000\000\000\000\
\091\001\041\255\082\001\066\001\232\254\251\254\005\255\005\255\
\005\255\005\255\005\255\005\255\005\255\005\255\005\255\041\255\
\000\000\000\000\005\255\005\255\005\255\005\255\005\255\005\255\
\238\254\005\255\073\255\073\255\073\255\073\255\000\000\000\000\
\000\000\000\000\000\000\000\000\218\255\235\255\254\000\015\001\
\032\001\049\001\238\254\007\255\006\255\005\255\005\255\005\255\
\005\255\005\255\005\255\000\000\005\255\005\255\049\255\120\255\
\138\255\156\255\174\255\200\255\092\255\091\001\005\255\005\255\
\005\255\005\255\005\255\005\255\005\255\091\001\091\001\091\001\
\091\001\091\001\091\001\091\001"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\024\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\022\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\043\000\064\000\085\000\106\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\013\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\122\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\138\000\154\000\170\000\
\186\000\202\000\218\000\234\000"

let yygindex = "\000\000\
\017\000\250\255\232\255\026\000"

let yytablesize = 614
let yytable = "\013\000\
\009\000\033\000\014\000\024\000\001\000\003\000\034\000\051\000\
\015\000\016\000\017\000\018\000\019\000\020\000\021\000\022\000\
\023\000\024\000\061\000\011\000\012\000\007\000\004\000\028\000\
\005\000\005\000\060\000\062\000\006\000\007\000\008\000\035\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\
\000\000\003\000\011\000\045\000\046\000\047\000\048\000\049\000\
\050\000\044\000\053\000\015\000\016\000\017\000\018\000\019\000\
\020\000\021\000\022\000\023\000\000\000\000\000\000\000\010\000\
\006\000\007\000\008\000\000\000\071\000\000\000\063\000\064\000\
\065\000\066\000\067\000\068\000\000\000\069\000\070\000\019\000\
\020\000\021\000\022\000\023\000\013\000\000\000\000\000\078\000\
\079\000\080\000\081\000\082\000\083\000\084\000\015\000\016\000\
\017\000\018\000\019\000\020\000\021\000\022\000\023\000\000\000\
\000\000\012\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\077\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\025\000\015\000\016\000\017\000\018\000\019\000\020\000\
\021\000\022\000\023\000\000\000\000\000\000\000\000\000\000\000\
\000\000\019\000\000\000\072\000\015\000\016\000\017\000\018\000\
\019\000\020\000\021\000\022\000\023\000\000\000\000\000\000\000\
\000\000\020\000\000\000\000\000\000\000\073\000\015\000\016\000\
\017\000\018\000\019\000\020\000\021\000\022\000\023\000\000\000\
\000\000\021\000\000\000\000\000\000\000\000\000\000\000\074\000\
\015\000\016\000\017\000\018\000\019\000\020\000\021\000\022\000\
\023\000\022\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\075\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\023\000\015\000\016\000\017\000\018\000\019\000\020\000\
\021\000\022\000\023\000\000\000\000\000\000\000\000\000\000\000\
\000\000\024\000\000\000\076\000\015\000\016\000\017\000\018\000\
\019\000\020\000\021\000\022\000\023\000\000\000\000\000\000\000\
\000\000\026\000\000\000\000\000\054\000\015\000\016\000\017\000\
\018\000\019\000\020\000\021\000\022\000\023\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\055\000\000\000\000\000\
\000\000\000\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\000\000\009\000\009\000\000\000\009\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\000\000\
\007\000\007\000\000\000\007\000\011\000\011\000\011\000\011\000\
\011\000\000\000\000\000\000\000\000\000\000\000\011\000\011\000\
\011\000\011\000\011\000\011\000\000\000\011\000\011\000\000\000\
\011\000\010\000\010\000\010\000\010\000\010\000\000\000\000\000\
\000\000\000\000\000\000\010\000\010\000\010\000\010\000\010\000\
\010\000\000\000\010\000\010\000\000\000\010\000\013\000\013\000\
\013\000\013\000\013\000\000\000\000\000\000\000\000\000\000\000\
\013\000\013\000\013\000\013\000\013\000\013\000\000\000\013\000\
\013\000\000\000\013\000\012\000\012\000\012\000\012\000\012\000\
\000\000\000\000\000\000\000\000\000\000\012\000\012\000\012\000\
\012\000\012\000\012\000\025\000\012\000\012\000\000\000\012\000\
\000\000\000\000\000\000\000\000\000\000\025\000\025\000\025\000\
\025\000\025\000\025\000\019\000\025\000\025\000\000\000\025\000\
\000\000\000\000\000\000\000\000\000\000\019\000\019\000\019\000\
\019\000\019\000\019\000\020\000\019\000\019\000\000\000\019\000\
\000\000\000\000\000\000\000\000\000\000\020\000\020\000\020\000\
\020\000\020\000\020\000\021\000\020\000\020\000\000\000\020\000\
\000\000\000\000\000\000\000\000\000\000\021\000\021\000\021\000\
\021\000\021\000\021\000\022\000\021\000\021\000\000\000\021\000\
\000\000\000\000\000\000\000\000\000\000\022\000\022\000\022\000\
\022\000\022\000\022\000\023\000\022\000\022\000\000\000\022\000\
\000\000\000\000\000\000\000\000\000\000\023\000\023\000\023\000\
\023\000\023\000\023\000\024\000\023\000\023\000\000\000\023\000\
\000\000\000\000\000\000\000\000\000\000\024\000\024\000\024\000\
\024\000\024\000\024\000\026\000\024\000\024\000\000\000\024\000\
\000\000\000\000\000\000\000\000\000\000\026\000\026\000\026\000\
\026\000\026\000\026\000\000\000\026\000\026\000\000\000\026\000\
\015\000\016\000\017\000\018\000\019\000\020\000\021\000\022\000\
\023\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\056\000\015\000\016\000\017\000\018\000\019\000\020\000\021\000\
\022\000\023\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\057\000\015\000\016\000\017\000\018\000\019\000\020\000\
\021\000\022\000\023\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\058\000\015\000\016\000\017\000\018\000\019\000\
\020\000\021\000\022\000\023\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\059\000\015\000\016\000\017\000\018\000\
\019\000\020\000\021\000\022\000\023\000\027\000\028\000\029\000\
\030\000\031\000\032\000\026\000\015\000\016\000\017\000\018\000\
\019\000\020\000\021\000\022\000\023\000\015\000\016\000\017\000\
\018\000\019\000\020\000\021\000\022\000\023\000"

let yycheck = "\023\001\
\000\000\026\001\026\001\010\000\001\000\001\001\012\001\026\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\024\000\012\001\003\000\004\000\000\000\018\001\000\000\
\012\001\021\001\051\000\022\001\024\001\025\001\026\001\015\000\
\016\000\017\000\018\000\019\000\020\000\021\000\022\000\023\000\
\255\255\001\001\000\000\027\000\028\000\029\000\030\000\031\000\
\032\000\024\000\034\000\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\255\255\255\255\255\255\000\000\
\024\001\025\001\026\001\255\255\020\001\255\255\054\000\055\000\
\056\000\057\000\058\000\059\000\255\255\061\000\062\000\007\001\
\008\001\009\001\010\001\011\001\000\000\255\255\255\255\071\000\
\072\000\073\000\074\000\075\000\076\000\077\000\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\255\255\
\255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\022\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\000\000\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\255\255\255\255\255\255\255\255\255\255\
\255\255\000\000\255\255\020\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\255\255\255\255\255\255\
\255\255\000\000\255\255\255\255\255\255\020\001\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\255\255\
\255\255\000\000\255\255\255\255\255\255\255\255\255\255\020\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\020\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\000\000\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\255\255\255\255\255\255\255\255\255\255\
\255\255\000\000\255\255\020\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\255\255\255\255\255\255\
\255\255\000\000\255\255\255\255\019\001\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\019\001\255\255\255\255\
\255\255\255\255\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\020\001\255\255\022\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\255\255\
\019\001\020\001\255\255\022\001\002\001\003\001\004\001\005\001\
\006\001\255\255\255\255\255\255\255\255\255\255\012\001\013\001\
\014\001\015\001\016\001\017\001\255\255\019\001\020\001\255\255\
\022\001\002\001\003\001\004\001\005\001\006\001\255\255\255\255\
\255\255\255\255\255\255\012\001\013\001\014\001\015\001\016\001\
\017\001\255\255\019\001\020\001\255\255\022\001\002\001\003\001\
\004\001\005\001\006\001\255\255\255\255\255\255\255\255\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\255\255\019\001\
\020\001\255\255\022\001\002\001\003\001\004\001\005\001\006\001\
\255\255\255\255\255\255\255\255\255\255\012\001\013\001\014\001\
\015\001\016\001\017\001\002\001\019\001\020\001\255\255\022\001\
\255\255\255\255\255\255\255\255\255\255\012\001\013\001\014\001\
\015\001\016\001\017\001\002\001\019\001\020\001\255\255\022\001\
\255\255\255\255\255\255\255\255\255\255\012\001\013\001\014\001\
\015\001\016\001\017\001\002\001\019\001\020\001\255\255\022\001\
\255\255\255\255\255\255\255\255\255\255\012\001\013\001\014\001\
\015\001\016\001\017\001\002\001\019\001\020\001\255\255\022\001\
\255\255\255\255\255\255\255\255\255\255\012\001\013\001\014\001\
\015\001\016\001\017\001\002\001\019\001\020\001\255\255\022\001\
\255\255\255\255\255\255\255\255\255\255\012\001\013\001\014\001\
\015\001\016\001\017\001\002\001\019\001\020\001\255\255\022\001\
\255\255\255\255\255\255\255\255\255\255\012\001\013\001\014\001\
\015\001\016\001\017\001\002\001\019\001\020\001\255\255\022\001\
\255\255\255\255\255\255\255\255\255\255\012\001\013\001\014\001\
\015\001\016\001\017\001\002\001\019\001\020\001\255\255\022\001\
\255\255\255\255\255\255\255\255\255\255\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\019\001\020\001\255\255\022\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\019\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\019\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\019\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\019\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\002\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001"

let yynames_const = "\
  LPAREN\000\
  RPAREN\000\
  MINUS\000\
  PLUS\000\
  MINUSDOT\000\
  PLUSDOT\000\
  TIMES\000\
  DIVIDE\000\
  TIMESDOT\000\
  DIVIDEDOT\000\
  MOD\000\
  EQUAL\000\
  NEQUAL\000\
  NMORE\000\
  NLESS\000\
  LESS\000\
  MORE\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LET\000\
  IN\000\
  REC\000\
  EOF\000\
  "

let yynames_block = "\
  NUMBER\000\
  REAL\000\
  VAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 40 "parser.mly"
 ( Syntax.Number (_1) )
# 325 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 42 "parser.mly"
 ( Syntax.Real (_1) )
# 332 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 44 "parser.mly"
 ( Syntax.Variable (_1) )
# 339 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 46 "parser.mly"
 ( _2 )
# 346 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 50 "parser.mly"
 ( [(_1, Type.gen_type ())] )
# 353 "parser.ml"
               : 'vars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vars) in
    Obj.repr(
# 52 "parser.mly"
 ( (_1, Type.gen_type ()) :: _2 )
# 361 "parser.ml"
               : 'vars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 56 "parser.mly"
 ( [_1] )
# 368 "parser.ml"
               : 'app))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'app) in
    Obj.repr(
# 58 "parser.mly"
   ( _1 :: _2 )
# 376 "parser.ml"
               : 'app))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 62 "parser.mly"
 ( _1 )
# 383 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 64 "parser.mly"
        ( Syntax.Op (_1, Operator.Plus, _3) )
# 391 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 66 "parser.mly"
 ( Syntax.Op (_1, Operator.Minus, _3) )
# 399 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 68 "parser.mly"
        ( Syntax.Op (_1, Operator.PlusDot, _3) )
# 407 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 70 "parser.mly"
 ( Syntax.Op (_1, Operator.MinusDot, _3) )
# 415 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 72 "parser.mly"
 ( Syntax.Op (_1, Operator.Times, _3) )
# 423 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 74 "parser.mly"
 ( Syntax.Op (_1, Operator.Divide, _3) )
# 431 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 76 "parser.mly"
        ( Syntax.Op (_1, Operator.Mod, _3) )
# 439 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 78 "parser.mly"
 ( Syntax.Op (_1, Operator.TimesDot, _3) )
# 447 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 80 "parser.mly"
 ( Syntax.Op (_1, Operator.DivideDot, _3) )
# 455 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Syntax.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 82 "parser.mly"
      ( Syntax.IfEqual (_2, _4, _6, _8) )
# 465 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Syntax.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 84 "parser.mly"
      ( Syntax.IfEqual (_2, _4, _8, _6) )
# 475 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Syntax.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 86 "parser.mly"
      ( Syntax.IfLess (_4, _2, _8, _6) )
# 485 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Syntax.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 88 "parser.mly"
      ( Syntax.IfLess (_2, _4, _8, _6) )
# 495 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Syntax.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 90 "parser.mly"
      ( Syntax.IfLess (_2, _4, _6, _8) )
# 505 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Syntax.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 92 "parser.mly"
      ( Syntax.IfLess (_4, _2, _6, _8) )
# 515 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 94 "parser.mly"
       ( Syntax.Let ((_2, Type.gen_type ()), _4, _6) )
# 524 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'vars) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 96 "parser.mly"
       ( Syntax.LetRec ((_3, Type.gen_type ()), _4, _6, _8) )
# 534 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'app) in
    Obj.repr(
# 98 "parser.mly"
   ( Syntax.Application (_1, _2) )
# 542 "parser.ml"
               : Syntax.t))
(* Entry expr *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let expr (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.t)
